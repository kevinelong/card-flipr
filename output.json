[
    {
        "topic": "computers",
        "name": "hardware",
        "meaning": "physical components of a computer",
        "example": "motherboard, cpu, gpu, ram, disks"
    },
    {
        "topic": "computers",
        "name": "software",
        "meaning": " instructions for computer to execute",
        "example": "binary machine code for the cpu"
    },
    {
        "topic": "computers",
        "name": "firmware",
        "meaning": "software embedded into hardware",
        "example": "ROM-BIOS"
    },
    {
        "topic": "computers",
        "name": "OS",
        "meaning": "Operating System",
        "example": "MS-Windows, MacOS, ChromeOS, Linux"
    },
    {
        "topic": "computers",
        "name": "Application",
        "meaning": "Software running on top of an operating system.",
        "example": "MS-Windows, MacOS, ChromeOS, Linux"
    },
    {
        "topic": "computers",
        "name": "terminal",
        "meaning": "emulates screen and keyboard of a dumb terminal (no cpu)",
        "example": "MS-Windows, MacOS, ChromeOS, Linux"
    },
    {
        "topic": "computers",
        "name": "shell",
        "meaning": "program we talk to with the terminal",
        "example": "MS-Windows, MacOS, ChromeOS, Linux"
    },
    {
        "topic": "computers",
        "name": "directory",
        "meaning": "a folder",
        "example": "mysite/"
    },
    {
        "topic": "command line",
        "name": "ls",
        "meaning": "list files",
        "example": "ls -la"
    },
    {
        "topic": "command line",
        "name": "cd",
        "meaning": "change directory (open folder)",
        "example": "cd mysite"
    },
    {
        "topic": "command line",
        "name": ".",
        "meaning": "current directory",
        "example": "cd mysite"
    },
    {
        "topic": "command line",
        "name": "..",
        "meaning": "parent directory",
        "example": "cd mysite"
    },
    {
        "topic": "command line",
        "name": "touch",
        "meaning": "create/update-datetime on a file",
        "example": "touch one.txt two.txt"
    },
    {
        "topic": "command line",
        "name": "mkdir",
        "meaning": "make directory (create folder)",
        "example": "mkdir images styles scripts"
    },
    {
        "topic": "command line",
        "name": "echo",
        "meaning": "print",
        "example": "echo howdy"
    },
    {
        "topic": "command line",
        "name": ">",
        "meaning": "redirect creating/destroying",
        "example": "echo hello > greeting.txt"
    },
    {
        "topic": "command line",
        "name": ">>",
        "meaning": "redirect appending",
        "example": "echo world >> greeting.txt"
    },
    {
        "topic": "command line",
        "name": "*",
        "meaning": "wildcard matching any pattern",
        "example": "ls *html"
    },
    {
        "topic": "command line",
        "name": "cat",
        "meaning": "concatenate (chain to screen one letter at a time)",
        "example": "cat greeting.txt"
    },
    {
        "topic": "command line",
        "name": "mv",
        "meaning": "move or rename a file or files",
        "example": "mv *txt text"
    },
    {
        "topic": "command line",
        "name": "mv",
        "meaning": "move or rename a file or files",
        "example": "mv about.html aboutus.html"
    },
    {
        "topic": "command line",
        "name": "rm",
        "meaning": "remove file",
        "example": "rm aboutus.html"
    },
    {
        "topic": "command line",
        "name": "rmdir",
        "meaning": "remove directory (delete folder)",
        "example": "rmdir text"
    },
    {
        "topic": "command line",
        "name": "rm -rf dir_name",
        "meaning": "remove recursive forced",
        "example": "rm -rf text"
    },
    {
        "topic": "command line",
        "name": "cp",
        "meaning": "copy leaving original intact (like a copy and paste)",
        "example": "cp index.html about.html"
    },
    {
        "topic": "command line",
        "name": "pwd",
        "meaning": "print working directory ",
        "example": "pwd"
    },
    {
        "topic": "learn to code",
        "name": "editor",
        "meaning": "a text editor for editing plain text files (ASCII, UTF-8, UNICODE)",
        "example": "notepad"
    },
    {
        "topic": "learn to code",
        "name": "IDE",
        "meaning": "Integrated Development Enviroment",
        "example": "code ."
    },
    {
        "topic": "learn to code",
        "name": "code",
        "meaning": "meaningful symbols or words",
        "example": "in ASCII 65 means the letter \"A\""
    },
    {
        "topic": "learn to code",
        "name": "html",
        "meaning": "hypertext markup language",
        "example": "<h1>Hello World</>"
    },
    {
        "topic": "learn to code",
        "name": "css",
        "meaning": "cascading style sheets",
        "example": "body { font-family: sans-serif }"
    },
    {
        "topic": "learn to code",
        "name": "javascript",
        "meaning": "a general purpose programming language",
        "example": "node main.js"
    },
    {
        "topic": "learn to code",
        "name": "tag",
        "meaning": "an html fragment we can type in plain text",
        "example": "<br>"
    },
    {
        "topic": "learn to code",
        "name": "closing tag",
        "meaning": "some tags surround other tags or text content and need to know where to stop.",
        "example": "<div>Content</div>"
    },
    {
        "topic": "learn to code",
        "name": "element",
        "meaning": "the resulting document object created based on a tag",
        "example": "<div>Content</div>"
    },
    {
        "topic": "learn to code",
        "name": "attribute",
        "meaning": "extra information typed inside an opening tag",
        "example": "<div id=\"abc\">content</div>"
    },
    {
        "topic": "learn to code",
        "name": "property",
        "meaning": "the resulting named value created based on an attribute.",
        "example": "element.id"
    },
    {
        "topic": "capstone",
        "name": "linter",
        "meaning": "detects minor and major issues with code",
        "example": "w3c validators for html and css"
    },
    {
        "topic": "javascript",
        "name": "a program",
        "meaning": "script, app(application), code, executable",
        "example": "w3c validators for html and css"
    },
    {
        "topic": "javascript",
        "name": "Single Purpose",
        "meaning": "Can be used for or speciallizes in just one thing.",
        "example": "HTML or CSS can be used for just structure or styling."
    },
    {
        "topic": "javascript",
        "name": "General Purpose",
        "meaning": "Can be used for virtually anything",
        "example": "HTML or CSS can be used for just structure or styling."
    },
    {
        "topic": "javascript",
        "name": "interpreter",
        "meaning": "executed source code one at the last minute",
        "example": "HTML or CSS can be used for just structure or styling."
    },
    {
        "topic": "javascript",
        "name": "compiler",
        "meaning": "converts source code into machine language for the CPU",
        "example": "HTML or CSS can be used for just structure or styling."
    },
    {
        "topic": "javascript",
        "name": "statement",
        "meaning": "a single \"line\" of code",
        "example": "x = 123"
    },
    {
        "topic": "javascript",
        "name": "variable",
        "meaning": "a labeled value",
        "example": "x"
    },
    {
        "topic": "javascript",
        "name": "declaration",
        "meaning": "assigning a value to a variable",
        "example": "let x = 123;"
    },
    {
        "topic": "javascript",
        "name": "operator",
        "meaning": "symbols, especially math symbols",
        "example": "c = a + b"
    },
    {
        "topic": "javascript",
        "name": "value",
        "meaning": "what a variable contains, what an identifier points to.",
        "example": "c = a + b"
    },
    {
        "topic": "javascript",
        "name": "comment",
        "meaning": "a not to self that is ignored and not treated as code to execute",
        "example": "//single line comment /*multiline comment */"
    },
    {
        "topic": "javascript",
        "name": "data type",
        "meaning": "a kind of value. shape each kind takes in memory.",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "run",
        "meaning": "execute code",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "debug",
        "meaning": "run with breakpoints to help find bugs by slowing execution and making temporary values visible.",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "extension",
        "meaning": "a vscode plugin that adds new functionality to the editor/IDE",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "line terminator",
        "meaning": "character that goes at the end of a statement like the semi colon ;",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "expression",
        "meaning": "calculated part of a statement; often in parentheses",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "=",
        "meaning": "assignment operator",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "=",
        "meaning": "assignment operator",
        "example": "Number, String, Date, Boolean"
    },
    {
        "topic": "javascript",
        "name": "function",
        "meaning": "block of code that can be repeated and called by name",
        "example": "funtion area(h,w){return h*w;}"
    },
    {
        "topic": "javascript",
        "name": "call/invoke",
        "meaning": "the code that use/enters a function is the caller",
        "example": "console.log(area(10,20));"
    },
    {
        "topic": "javascript",
        "name": "arguments",
        "meaning": "the values passed by the caller to the function",
        "example": "console.log(area(10,20));"
    },
    {
        "topic": "javascript",
        "name": "parameters",
        "meaning": "the named values received into the funtion",
        "example": "funtion area(h,w){return h*w;}"
    },
    {
        "topic": "javascript",
        "name": "return value",
        "meaning": "the result of the function that is sent back to the caller",
        "example": "funtion area(h,w){return h*w;}"
    },
    {
        "topic": "javascript",
        "name": "element",
        "meaning": "an object created in the browser",
        "example": "e = document.getElementById(\"name\")"
    },
    {
        "topic": "javascript",
        "name": "event",
        "meaning": "something that happens that can trigger functions without an explicit call",
        "example": "e.addEventListener(\"click\", onClick);"
    },
    {
        "topic": "javascript",
        "name": "click",
        "meaning": "the name of the event that fires when an html element is clicked",
        "example": "e.addEventListener(\"click\", onClick);"
    },
    {
        "topic": "javascript",
        "name": "listener",
        "meaning": "the function that is wired to respond to an event",
        "example": "e.addEventListener(\"click\", onClick);"
    },
    {
        "topic": "javascript",
        "name": "value",
        "meaning": "the property of an html input used to store and retrieve a value",
        "example": "const quantity = e.value;"
    },
    {
        "topic": "javascript",
        "name": "functional programming",
        "meaning": "treating functions as values (just another data type)",
        "example": "const quantity = e.value;"
    },
    {
        "topic": "javascript",
        "name": "callback function",
        "meaning": "a function that is called when another process is complete",
        "example": "const quantity = e.value;"
    },
    {
        "topic": "javascript",
        "name": "Date object",
        "meaning": "a data type for holding date and time values that has many methods",
        "example": "const quantity = e.value;"
    },
    {
        "topic": "javascript",
        "name": "String object",
        "meaning": "a data type for holding a list of characters (letter, numbers, symbols, or spaces)",
        "example": "const quantity = e.value;"
    },
    {
        "topic": "javascript",
        "name": "object",
        "meaning": "a dictionary of key \"words\" and their associated values (includes functions) looked up by key",
        "example": "let person = {name:\"Kevin\",age:57};"
    },
    {
        "topic": "javascript",
        "name": "array",
        "meaning": "a list of ordered values that can be accessed by index/offset (distance from the first)",
        "example": "let fruit = [\"apple\",\"banana\",\"cherry\"];"
    },
    {
        "topic": "javascript",
        "name": "literal",
        "meaning": "creating something immediatly inline using puctualtion like [] or {} instead of a function.",
        "example": "see above"
    },
    {
        "topic": "javascript",
        "name": "push",
        "meaning": "expand an array by adding a value to it",
        "example": "see above"
    },
    {
        "topic": "javascript",
        "name": "nested",
        "meaning": "one inside the other like a nested loop for rows and columns",
        "example": "see above"
    },
    {
        "topic": "javascript",
        "name": "loop",
        "meaning": "a code path that circles back up to the top of its block",
        "example": "instead of flowing straight down like normal"
    },
    {
        "topic": "javascript",
        "name": "while",
        "meaning": "simplest loop",
        "example": "instead of flowing straight down like normal"
    },
    {
        "topic": "javascript",
        "name": "for",
        "meaning": "compact versatile loop",
        "example": "instead of flowing straight down like normal"
    },
    {
        "topic": "javascript",
        "name": "of",
        "meaning": "pull one value at a time out of an Array",
        "example": "for(value of arrayList){console.log(value)}"
    },
    {
        "topic": "javascript",
        "name": "in",
        "meaning": "pull one key at a time out of an Object",
        "example": "for(key in thisObject){console.log(thisObject,thisObject[key]}"
    },
    {
        "topic": "javascript",
        "name": "iteration",
        "meaning": "a single pass through a loop",
        "example": "for(key in thisObject){console.log(thisObject,thisObject[key]}"
    },
    {
        "topic": "javascript",
        "name": "iterable",
        "meaning": "can be loop through one at a time",
        "example": "for(key in thisObject){console.log(thisObject,thisObject[key]}"
    },
    {
        "topic": "javascript",
        "name": "createElement()",
        "meaning": "create a new html element for the document",
        "example": "document.createElement(\"div\")"
    },
    {
        "topic": "javascript",
        "name": "appendChild()",
        "meaning": "put one html element object inside another element",
        "example": "parentElement.appendChild(childElement)"
    },
    {
        "topic": "javascript",
        "name": "sprite",
        "meaning": "a small image that can move around the screen like a fairy",
        "example": "https://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29"
    },
    {
        "topic": "javascript",
        "name": "select",
        "meaning": "drop-down list",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "option",
        "meaning": "a selectable item in a drop-down-list",
        "example": "<option value=\"code\">Visible Content</option>"
    },
    {
        "topic": "javascript",
        "name": "hierarchy",
        "meaning": "a tree like structure with parents and children",
        "example": "html page has a hierachy. JavaScript data structure."
    },
    {
        "topic": "javascript",
        "name": "dropdown, listbox",
        "meaning": "old terms for a select",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "ui",
        "meaning": "User Interface (what we see and touch) GUI G==Graphical i.e. Pixel",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "pixel",
        "meaning": "a dot or square on the screen. the smallest unit we can see.",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "element",
        "meaning": "an item in a array/list of items",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "forEach",
        "meaning": "apply to each element in an array of items",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "find",
        "meaning": "find an element in an array",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "findIndex",
        "meaning": "find position of an element in an array",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "filter",
        "meaning": "return only elements for which an expression is true",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "map",
        "meaning": "transform array of elements",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "reduce",
        "meaning": "boil down an array/list into a single return value like a total or an average, min or max",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "reduce",
        "meaning": "boil down an array/list into a single return value like a total or an average, min or max",
        "example": "<select id=\"list\">...options...</select>"
    },
    {
        "topic": "javascript",
        "name": "DOM",
        "meaning": "document object model",
        "example": "document.getElementById(), document.querySelectorAll()"
    },
    {
        "topic": "javascript",
        "name": "BOM",
        "meaning": "browser object model",
        "example": "window.location, window.navigator"
    },
    {
        "topic": "javascript",
        "name": "subscript",
        "meaning": "an element representing an items position in an array",
        "example": "let oldest = kids[0]"
    },
    {
        "topic": "javascript",
        "name": "node",
        "meaning": "an HTML element in a hierachy",
        "example": "an element in an array or a parent or child"
    },
    {
        "topic": "Algorithms",
        "name": "algorithm",
        "meaning": "a specific way of solving a general problem",
        "example": "each with its own performance charateristics like how long it takes, or how much memory it consumes"
    },
    {
        "topic": "Algorithms",
        "name": "kata",
        "meaning": "a form of practice",
        "example": "each with its own performance charateristics like how long it takes, or how much memory it consumes"
    },
    {
        "topic": "Algorithms",
        "name": "tests",
        "meaning": "code that proves other code works or not",
        "example": "each with its own performance charateristics like how long it takes, or how much memory it consumes"
    },
    {
        "topic": "Algorithms",
        "name": "traversing",
        "meaning": "traveling over",
        "example": "like linked list or a tree"
    },
    {
        "topic": "AJAX pt1",
        "name": "AJAX",
        "meaning": "technique of using background requests - Asynchronous JavaScript and XML/JSON/ETC",
        "example": "XMLHTTPRequest() now called fetch()"
    },
    {
        "topic": "AJAX pt1",
        "name": "API",
        "meaning": "Application Programmers Interface - an easy set of functions to call for front end programmers to make their life simple",
        "example": "XMLHTTPRequest() now called fetch()"
    },
    {
        "topic": "AJAX pt1",
        "name": "Application Programmer",
        "meaning": "A Front End Engineer focused on user intereface design not backend technolgy like sql databases",
        "example": "XMLHTTPRequest() now called fetch()"
    },
    {
        "topic": "AJAX pt1",
        "name": "Front End Engineer",
        "meaning": "Client (BRowser) USer interface Programmer (an appllication programmer)- focused on user intereface design not backend technolgy lat sql databases",
        "example": "XMLHTTPRequest() now called fetch()"
    },
    {
        "topic": "AJAX pt1",
        "name": "Back End Engineer",
        "meaning": "Server (Web/Database) WEB/API Programmer",
        "example": "PHP/PYTHON/JAVA/JAVASCRIPT + SQL"
    },
    {
        "topic": "AJAX pt1",
        "name": "interface",
        "meaning": "how things connect",
        "example": "PHP/PYTHON/JAVA/JAVASCRIPT + SQL"
    },
    {
        "topic": "AJAX pt1",
        "name": "protocol",
        "meaning": "agreement on the shape and meaning of information sent and received",
        "example": "like flags on a ship, like which language to speak"
    },
    {
        "topic": "AJAX pt1",
        "name": "HTTP",
        "meaning": "THe web protocol (HyperText Transport Protocal)",
        "example": "scheme in the url e.g HTTPS://"
    },
    {
        "topic": "AJAX pt1",
        "name": "REST",
        "meaning": "REpresentational State Transfer - technique of using meaningful URLs and HTTP verbs",
        "example": "POST, GET, PATCH, DELETE; Using HTTP Verbs and URLs MEANINGFULY"
    },
    {
        "topic": "AJAX pt1",
        "name": "HTTP VERBS",
        "meaning": "CRUD: GET/POST/PUT/DELETE and also others like PATCH",
        "example": "Create, Read, Update, Delete"
    },
    {
        "topic": "AJAX pt1",
        "name": "SQL ",
        "meaning": "Language for databases. Structured Query Language.",
        "example": "Insert, Select, Update, Delete"
    },
    {
        "topic": "AJAX pt1",
        "name": "endpoint/resource",
        "meaning": "URL/URI path to the data we want to use",
        "example": "/api/v1/products/"
    },
    {
        "topic": "AJAX pt1",
        "name": "api-key",
        "meaning": "a personal id \"number\"",
        "example": "/api/v1/products/"
    },
    {
        "topic": "AJAX pt1",
        "name": "throttle",
        "meaning": "rate-limit accesses per day for a given api-key",
        "example": "/api/v1/products/"
    },
    {
        "topic": "AJAX pt1",
        "name": "XML",
        "meaning": "store complext hierarchical data in a string or file  eXtensible Markup Language - Data <><></></>",
        "example": "validated  - looks like graphics, SVG, XHTML, SGML"
    },
    {
        "topic": "AJAX pt1",
        "name": "JSON",
        "meaning": "store complext hierarchical data in a string or file [{\"\":\"\"}]",
        "example": "also validated? looks like code"
    },
    {
        "topic": "AJAX pt1",
        "name": "XMLHttpRequest()",
        "meaning": "background http requests for javascript old school - used call back functions instad of async",
        "example": "also validated? looks like code"
    },
    {
        "topic": "AJAX pt1",
        "name": "fetch()",
        "meaning": "modern background requests for javascript",
        "example": "also validated? looks like code"
    },
    {
        "topic": "AJAX pt1",
        "name": "async",
        "meaning": "many things all at the same time (parallel)",
        "example": "also validated? looks like code"
    },
    {
        "topic": "AJAX pt1",
        "name": "promise",
        "meaning": "a delayed or deferred response to support asynchronous(parallel rather than single threaded)",
        "example": "also validated? looks like code"
    },
    {
        "topic": "AJAX pt1",
        "name": "await",
        "meaning": "a way to turn off async so promises don't make us crazy",
        "example": "also validated? looks like code"
    },
    {
        "topic": "USER",
        "name": "HTTP METHODS/VERBS",
        "meaning": "DATABASE SQL ",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Create",
        "name": "POST",
        "meaning": "INSERT",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Read",
        "name": "GET",
        "meaning": "SELECT",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Update",
        "name": "PUT",
        "meaning": "UPDATE",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Delete",
        "name": "DELETE",
        "meaning": "DELETE",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Delete",
        "name": "flag",
        "meaning": "A boolean (true/false) option that is turned on by the presense/existense of it. -a -l or readonly in html attributes",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Databases",
        "name": "Database",
        "meaning": "Both a place to store structured data on disk efficiently and a way to search and filter that data quickly to provide answers.",
        "example": "also validated? looks like code"
    },
    {
        "topic": "Databases",
        "name": "RDBMS",
        "meaning": "Relational Database Management System",
        "example": "mysql, oracle, ibm db2, microsoft sql server"
    },
    {
        "topic": "Databases",
        "name": "NO-SQL",
        "meaning": "Any database that is not \"relational\"",
        "example": "mongodb"
    },
    {
        "topic": "SQL",
        "name": "Relation",
        "meaning": "The association between two tables e.g. Customers and Orders",
        "example": "mongodb"
    },
    {
        "topic": "SQL",
        "name": "Table",
        "meaning": "The fundamental unit of information in a database. A type or category, or class of information.",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "query",
        "meaning": "test/string of sql code we send to the database to get a record set response.",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "SELECT",
        "meaning": "which fields to calculate or display",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "FROM tablename",
        "meaning": "which table to draw information from",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "WHERE",
        "meaning": "filter records to be included by field value",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "JOIN",
        "meaning": "add associated secondary table to draw fields from",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "ON",
        "meaning": "how to associate one table with another using their foreign keys",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "DDL",
        "meaning": "Data Decription Language for defining Schemas",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "schema",
        "meaning": "A database. A collection of tables that together form the structure for ",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "GROUP BY",
        "meaning": "combines input records into aggregates such as SUM() AVG() COUNT()",
        "example": "Customers"
    },
    {
        "topic": "SQL",
        "name": "HAVING",
        "meaning": "filters by output aggregate function e.g. SUM() AVG() COUNT()",
        "example": "Customers"
    }
]